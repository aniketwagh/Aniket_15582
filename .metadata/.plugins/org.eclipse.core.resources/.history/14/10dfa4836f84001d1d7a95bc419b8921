package com.Ecom.Dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.Ecom.model.Customer;
import com.Ecom.model.Order;

public class OrderDao implements IDao<Customer>{
	
	private DbConnection db;
	private static OrderDao orderdao;
	public OrderDao() {
		super();
		
	}
	public OrderDao(DbConnection db) {
		super();
		this.db = db;
	}
	
	public static OrderDao getDao() {
		if(orderdao==null) {
			synchronized (OrderDao.class) {
				if(orderdao==null){
					orderdao=new OrderDao(DbConnection.getDb());
				}
				
			}
		}
		return orderdao;
	

}
	public List<Customer> findAll() throws SQLException {
		final List<Customer> list = new ArrayList<Customer>();
		Connection connect = db.getConnection();
		Statement statement = connect.createStatement();
		final String sql = "select ordeid, ordername,totalprice from order";
		ResultSet resultSet = statement.executeQuery(sql);
		while(resultSet.next()) {
			list.add(new Order(resultSet.getInt(1),resultSet.getString(2),resultSet.getInt(3)));
		}
		return list;
	}
	public Customer findOne(int id) throws SQLException {
		Connection connect=db.getConnection();
		Statement statement=connect.createStatement();
		final String sql="select orderid , ordername, totalprice from order where orderid="+id;
		ResultSet resultSet=statement.executeQuery(sql);
		if(resultSet.next()) {
			final Customer customer=new Customer(resultSet.getInt(1),resultSet.getString(2),resultSet.getString(3),resultSet.getInt(4));
			return customer;
		}
		return null;
	}
	public boolean createNew(Customer t) throws SQLException {
		Connection connect=db.getConnection();		
		final String sql="insert into customer (custid, custname, custemail, custphone) values(?,?,?,?)";
		final PreparedStatement pStatement=connect.prepareStatement(sql);
		pStatement.setInt(1, t.getCustid());
		pStatement.setString(2, t.getCustname());
		pStatement.setString(3, t.getCustemail());
		pStatement.setInt(1, t.getCustphone());
		if(pStatement.executeUpdate()>0) {
			return true;
		}
		return false;
	}
	public boolean findOneAndDelete(int id) throws SQLException {
		final Connection connect=db.getConnection();
		final String sql="delete from customer where custid=?";
		final PreparedStatement pStatement=connect.prepareStatement(sql);
		pStatement.setInt(1, id);
		if(pStatement.executeUpdate()>0) {
			return true;
		}		
		return false;
	}
	public boolean findOneAndUpdate(int id, Customer t) throws SQLException {
		final Connection connect=db.getConnection();
		final String sql="update customer set custname=? where cust=?";
		final PreparedStatement pStatement=connect.prepareStatement(sql);
		pStatement.setInt(1, t.getCustid());
		pStatement.setString(2, t.getCustname());
		pStatement.setString(3, t.getCustemail());
		pStatement.setInt(4, t.getCustphone());
		if(pStatement.executeUpdate()>0) {
			return true;
		}		
		return false;
	}
}